{"ast":null,"code":"var _jsxFileName = \"D:\\\\Car\\\\cars\\\\src\\\\App.js\";\nimport React from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport Car from './Car/Car';\n\nclass Clock extends React.Component {\n  // Специальная функция такая же как function\n  constructor(props) {\n    //Метод constructor — специальный метод, необходимый для создания и инициализации объектов, созданных, с помощью класса. \n    super(props); //Ключевое слово super используется для вызова функций, принадлежащих родителю объекта.\n\n    this.state = {\n      // Массив в объектами\n      cars: [{\n        ovnerName: 'sosi',\n        carLable: 'mazda',\n        carEngine: true,\n        carDriveMotion: true,\n        carWheels: true\n      }, {\n        ovnerName: 'da',\n        carLable: 'lada',\n        carEngine: true,\n        carDriveMotion: true,\n        carWheels: true\n      }, {\n        ovnerName: 'net',\n        carLable: 'honda',\n        carEngine: false,\n        carDriveMotion: false,\n        carWheels: false\n      }],\n      formState: {\n        ovnerName: 'вв',\n        carLable: 'вв',\n        accepteCheck: false,\n        lableOptions: ['1', '2', '3']\n      }\n    };\n    console.log(this.state); // Выводит заданный в скобках параметр в консоль\n\n    this.handleChange = this.handleChange.bind(this); // Используется для связки метода класса, если ссылаться на метод без (), например onChange{this.onChange}, требуется привязать метод     \n\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    // Метод или обработчик события\n    this.setState({\n      value: event.target.value\n    }); // Метод для изменения значие в state\n  }\n\n  handleSubmit(formState) {\n    var refCar = [this.state.car, ...'привет'];\n    e.preventDefault();\n    this.setState({\n      toDoNotes: [...this.state.toDoNotes, formState]\n    });\n  }\n\n  render() {\n    // Отрисовка\n    return (\n      /*#__PURE__*/\n      // Возврат разметки\n      React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 9\n        }\n      }, \"\\u041F\\u0440\\u0438\\u0432\\u0435\\u0442, \\u043C\\u0438\\u0440!\"), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 9\n        }\n      }, this.state.cars.map(car => {\n        // Метод .map с помощью которого мы отрисовываем массив\n        return /*#__PURE__*/React.createElement(Car, {\n          ovnerName: car.ovnerName // Это нужно для прокидывания props \n          ,\n          carLable: car.carLable,\n          carEngine: car.carEngine,\n          carDriveMotion: car.carDriveMotion,\n          carWheels: car.carWheels,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 20\n          }\n        });\n      }), /*#__PURE__*/React.createElement(\"form\", {\n        onSubmit: this.handleSubmit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }\n      }, \"\\u0418\\u043C\\u044F \\u0432\\u043B\\u0430\\u0434\\u0435\\u043B\\u044C\\u0446\\u0430:\", /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        name: \"ovnerName\",\n        onChange: this.handleChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 16\n        }\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 17\n        }\n      }), \"\\u041C\\u0430\\u0440\\u043A\\u0430 \\u043C\\u0430\\u0448\\u0438\\u043D\\u044B:\", /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        name: \"carLable\",\n        onChange: this.handleChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 16\n        }\n      })), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"submit\",\n        value: \"Submit\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }\n      }))))\n    );\n  }\n\n}\n\nexport default Clock;","map":{"version":3,"sources":["D:/Car/cars/src/App.js"],"names":["React","Car","Clock","Component","constructor","props","state","cars","ovnerName","carLable","carEngine","carDriveMotion","carWheels","formState","accepteCheck","lableOptions","console","log","handleChange","bind","handleSubmit","event","setState","value","target","refCar","car","e","preventDefault","toDoNotes","render","map"],"mappings":"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","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Car from './Car/Car';\n\n\n\nclass Clock extends React.Component {       // Специальная функция такая же как function\n  constructor(props) {                      //Метод constructor — специальный метод, необходимый для создания и инициализации объектов, созданных, с помощью класса. \n    super(props);                           //Ключевое слово super используется для вызова функций, принадлежащих родителю объекта.\n    this.state = {                          // Массив в объектами\n      cars: [{\n        ovnerName: 'sosi',\n        carLable: 'mazda',\n        carEngine: true,\n        carDriveMotion: true,\n        carWheels: true\n      }, {\n        ovnerName: 'da',\n        carLable: 'lada',\n        carEngine: true,\n        carDriveMotion: true,\n        carWheels: true\n      }, {\n        ovnerName: 'net',\n        carLable: 'honda',\n        carEngine: false,\n        carDriveMotion: false,\n        carWheels: false\n      }],\n     formState: {ovnerName:'вв' , carLable: 'вв', accepteCheck: false , lableOptions: ['1', '2', '3']}   \n   }; \n   console.log(this.state)                                 // Выводит заданный в скобках параметр в консоль\n   this.handleChange = this.handleChange.bind(this);       // Используется для связки метода класса, если ссылаться на метод без (), например onChange{this.onChange}, требуется привязать метод     \n   this.handleSubmit = this.handleSubmit.bind(this) \n  }\n\n\n  handleChange(event) {                                    // Метод или обработчик события\n    this.setState({value: event.target.value});            // Метод для изменения значие в state\n  }\n\n  handleSubmit(formState) { \n    var refCar = [this.state.car, ...'привет'] \n    e.preventDefault();\n    this.setState({ toDoNotes: [...this.state.toDoNotes, formState]})\n  }\n\n  \n\n\n\n\n  render() {                                        // Отрисовка\n    return (                                        // Возврат разметки\n      <div>\n        <h1>Привет, мир!</h1>\n        <div>\n          {this.state.cars.map((car) => {           // Метод .map с помощью которого мы отрисовываем массив\n            return <Car\n              ovnerName={car.ovnerName}             // Это нужно для прокидывания props \n              carLable={car.carLable}\n              carEngine={car.carEngine}\n              carDriveMotion={car.carDriveMotion}\n              carWheels={car.carWheels}\n            />\n          })}\n          <form  onSubmit={this.handleSubmit}>      \n            <label>\n              Имя владельца:\n               <input type=\"text\" name=\"ovnerName\"  onChange ={this.handleChange}/>\n                <br />Марка машины:\n               <input type=\"text\" name=\"carLable\"  onChange ={this.handleChange} />\n            </label>\n            <input type=\"submit\" value=\"Submit\" />\n          </form>\n\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Clock;\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}