{"ast":null,"code":"var _jsxFileName = \"D:\\\\Car\\\\cars\\\\src\\\\App.js\";\nimport React from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport Car from './Car/Car';\n\nclass Clock extends React.Component {\n  // Специальная функция такая же как function\n  constructor(props) {\n    //Метод constructor — специальный метод, необходимый для создания и инициализации объектов, созданных, с помощью класса. \n    super(props); //Ключевое слово super используется для вызова функций, принадлежащих родителю объекта.\n\n    this.handleNameChange = e => {\n      this.setState({\n        formState: {\n          ovnerName: e.target.value\n        }\n      }); // this.setState({ formState: {carLable: e.target.value}});         \n    };\n\n    this.state = {\n      // Массив в объектами\n      cars: [{\n        ovnerName: 'sosi',\n        carLable: 'mazda',\n        carEngine: true,\n        carDriveMotion: true,\n        carWheels: true\n      }, {\n        ovnerName: 'da',\n        carLable: 'lada',\n        carEngine: true,\n        carDriveMotion: true,\n        carWheels: true\n      }, {\n        ovnerName: 'net',\n        carLable: 'honda',\n        carEngine: false,\n        carDriveMotion: false,\n        carWheels: false\n      }],\n      formState: {\n        ovnerName: '',\n        carLable: '',\n        accepteCheck: false,\n        lableOptions: ['1', '2', '3']\n      }\n    };\n    console.log(this.state); // Выводит заданный в скобках параметр в консоль\n\n    this.handleChange = this.handleNameChange.bind(this); // Используется для связки метода класса, если ссылаться на метод без (), например onChange{this.onChange}, требуется привязать метод     \n\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(e) {\n    alert(this.state.formState.ovnerName);\n    e.preventDefault();\n  }\n\n  render() {\n    // Отрисовка\n    return (\n      /*#__PURE__*/\n      // Возврат разметки\n      React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 9\n        }\n      }, \"\\u041F\\u0440\\u0438\\u0432\\u0435\\u0442, \\u043C\\u0438\\u0440!\"), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 9\n        }\n      }, this.state.cars.map(car => {\n        // Метод .map с помощью которого мы отрисовываем массив\n        return /*#__PURE__*/React.createElement(Car, {\n          ovnerName: car.ovnerName // Это нужно для прокидывания props \n          ,\n          carLable: car.carLable,\n          carEngine: car.carEngine,\n          carDriveMotion: car.carDriveMotion,\n          carWheels: car.carWheels,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 20\n          }\n        });\n      }), /*#__PURE__*/React.createElement(\"form\", {\n        onSubmit: this.handleSubmit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }\n      }, \"\\u0418\\u043C\\u044F \\u0432\\u043B\\u0430\\u0434\\u0435\\u043B\\u044C\\u0446\\u0430:\", /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        name: \"name\",\n        value: this.state.formState.ovnerName,\n        onChange: this.handleNameChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 16\n        }\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 17\n        }\n      }), \"\\u041C\\u0430\\u0440\\u043A\\u0430 \\u043C\\u0430\\u0448\\u0438\\u043D\\u044B:\", /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        name: \"carLable\",\n        value: this.state.formState.carLable,\n        onChange: this.handlelableChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 16\n        }\n      })), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"submit\",\n        value: \"Submit\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }\n      }))))\n    );\n  }\n\n}\n\nexport default Clock;","map":{"version":3,"sources":["D:/Car/cars/src/App.js"],"names":["React","Car","Clock","Component","constructor","props","handleNameChange","e","setState","formState","ovnerName","target","value","state","cars","carLable","carEngine","carDriveMotion","carWheels","accepteCheck","lableOptions","console","log","handleChange","bind","handleSubmit","alert","preventDefault","render","map","car","handlelableChange"],"mappings":"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","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Car from './Car/Car';\n\n\n\nclass Clock extends React.Component {       // Специальная функция такая же как function\n  constructor(props) {                      //Метод constructor — специальный метод, необходимый для создания и инициализации объектов, созданных, с помощью класса. \n    super(props);                           //Ключевое слово super используется для вызова функций, принадлежащих родителю объекта.\n    this.state = {                          // Массив в объектами\n      cars: [{\n        ovnerName: 'sosi',\n        carLable: 'mazda',\n        carEngine: true,\n        carDriveMotion: true,\n        carWheels: true\n      }, {\n        ovnerName: 'da',\n        carLable: 'lada',\n        carEngine: true,\n        carDriveMotion: true,\n        carWheels: true\n      }, {\n        ovnerName: 'net',\n        carLable: 'honda',\n        carEngine: false,\n        carDriveMotion: false,\n        carWheels: false\n      }],\n     formState: {ovnerName:'' , carLable: '', accepteCheck: false , lableOptions: ['1', '2', '3']}   \n   }; \n   console.log(this.state)                                 // Выводит заданный в скобках параметр в консоль\n   this.handleChange = this.handleNameChange.bind(this);       // Используется для связки метода класса, если ссылаться на метод без (), например onChange{this.onChange}, требуется привязать метод     \n   this.handleSubmit = this.handleSubmit.bind(this) \n  }\n\n\n \n  \n  handleNameChange = (e,) => {                                   \n    this.setState({ formState: {ovnerName: e.target.value}});\n    // this.setState({ formState: {carLable: e.target.value}});         \n  }\n\n\n  handleSubmit(e) { \n    alert(this.state.formState.ovnerName)\n    \n    e.preventDefault();\n    \n  }\n\n\n\n\n\n  render() {                                        // Отрисовка\n    \n    return (                                        // Возврат разметки\n      <div>\n        <h1>Привет, мир!</h1>\n        <div>\n          {this.state.cars.map((car) => {           // Метод .map с помощью которого мы отрисовываем массив\n            return <Car\n              ovnerName={car.ovnerName}             // Это нужно для прокидывания props \n              carLable={car.carLable}\n              carEngine={car.carEngine}\n              carDriveMotion={car.carDriveMotion}\n              carWheels={car.carWheels}\n            />\n          })}\n          <form  onSubmit={this.handleSubmit}>      \n            <label>\n              Имя владельца:\n               <input type=\"text\" name=\"name\" value={this.state.formState.ovnerName} onChange ={this.handleNameChange}/>\n                <br />Марка машины:\n               <input type=\"text\" name=\"carLable\" value={this.state.formState.carLable} onChange ={this.handlelableChange} />\n            </label>\n            <input type=\"submit\" value=\"Submit\" />\n          </form>\n\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Clock;\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}